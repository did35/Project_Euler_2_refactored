import UIKit

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

// Project Euler # 2

var arr = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
var evenArr = [Int]()

func add (n1: Int, n2: Int) -> Int {
    return n1 + n2
}

for i in 0...31 {
    if i >= 10 {
        arr.append(add(n1: arr[i - 2], n2: arr[i - 1]))
    }
}
print(arr)

// =========================================
// High level func filter() and reduce()
// =========================================
// Use filter() to loop over a collection (array, dictionary) and return an array containing only those elements that match and include condition (even number in this case).
// The last param from the func filter() is a closure ({$0 % 2 == 0}), so the () can be ommited.
evenArr = arr.filter{$0 % 2 == 0}
print(evenArr)
// Use reduce() to combine all items in a collection to create a single new value.
print("Sum of even values = \(evenArr.reduce(0, +))")


